from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from config import ADMIN_USERNAMES
import db
import asyncio
from apscheduler.schedulers.asyncio import AsyncIOScheduler

def is_admin(message: Message):
    return message.from_user.username in ADMIN_USERNAMES

class AdminStates(StatesGroup):
    waiting_for_broadcast = State()
    waiting_for_weekly_text = State()
    waiting_for_weekly_send = State()
    waiting_for_time = State()
    waiting_for_promo_action = State()
    waiting_for_new_promo = State()
    waiting_for_edit_promo_id = State()
    waiting_for_edit_promo_text = State()
    waiting_for_delete_promo_id = State()

# --- FSM —Ç–∞ —Ö–µ–Ω–¥–ª–µ—Ä–∏ –¥–ª—è —Ä–æ–∑—Å–∏–ª–æ–∫ —Ç–∞ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ ---
def register_broadcast_handlers(dp, bot, get_main_menu):
    @dp.message(lambda m: m.text == "‚öôÔ∏è –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å")
    async def admin_panel(message: Message):
        if not is_admin(message):
            return await message.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
        kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üì¢ –û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞ —Ä–æ–∑—Å–∏–ª–∫–∞")],
                [KeyboardButton(text="üîÅ –¢–∏–∂–Ω–µ–≤–∞ —Ä–æ–∑—Å–∏–ª–∫–∞")],
                [KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç —Ç–∏–∂–Ω–µ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏")],
                [KeyboardButton(text="‚è∞ –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —á–∞—Å —Ç–∏–∂–Ω–µ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏")],
                [KeyboardButton(text="üìù –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∞–∫—Ü—ñ—ó")],
                [KeyboardButton(text="‚Äπ –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –º–µ–Ω—é")],
            ], resize_keyboard=True
        )
        await message.answer("–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=kb)

    @dp.message(lambda m: m.text == "‚è∞ –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —á–∞—Å —Ç–∏–∂–Ω–µ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏")
    async def edit_weekly_time(message: Message, state: FSMContext):
        if not is_admin(message):
            return await message.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
        days_hint = (
            "0 = –Ω–µ–¥—ñ–ª—è\n"
            "1 = –ø–æ–Ω–µ–¥—ñ–ª–æ–∫\n"
            "2 = –≤—ñ–≤—Ç–æ—Ä–æ–∫\n"
            "3 = —Å–µ—Ä–µ–¥–∞\n"
            "4 = —á–µ—Ç–≤–µ—Ä\n"
            "5 = –ø'—è—Ç–Ω–∏—Ü—è\n"
            "6 = —Å—É–±–æ—Ç–∞"
        )
        await message.answer(
            f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ: –¥–µ–Ω—å_—Ç–∏–∂–Ω—è –≥–æ–¥–∏–Ω–∞:—Ö–≤–∏–ª–∏–Ω–∞\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 5 18:00\n\n–î–Ω—ñ —Ç–∏–∂–Ω—è:\n{days_hint}"
        )
        await state.set_state(AdminStates.waiting_for_time)

    @dp.message(AdminStates.waiting_for_time)
    async def save_weekly_time(message: Message, state: FSMContext):
        try:
            parts = message.text.strip().split()
            day = int(parts[0])
            hour, minute = map(int, parts[1].split(":"))
            db.set_weekly_time(day, hour, minute)
            await message.answer(f"–ß–∞—Å —Ç–∏–∂–Ω–µ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {day} {hour:02d}:{minute:02d}", reply_markup=get_main_menu(is_admin=is_admin(message)))
            await state.clear()
        except Exception:
            await message.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑: –¥–µ–Ω—å_—Ç–∏–∂–Ω—è –≥–æ–¥–∏–Ω–∞:—Ö–≤–∏–ª–∏–Ω–∞")

    @dp.message(lambda m: m.text == "üì¢ –û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞ —Ä–æ–∑—Å–∏–ª–∫–∞")
    async def once_broadcast(message: Message, state: FSMContext):
        if not is_admin(message):
            return await message.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
        await message.answer("–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏:")
        await state.set_state(AdminStates.waiting_for_broadcast)

    @dp.message(AdminStates.waiting_for_broadcast)
    async def send_once_broadcast(message: Message, state: FSMContext):
        users = db.get_all_users()
        sent = 0
        failed = 0
        for user in users:
            try:
                await bot.send_message(user[0], message.text)
                sent += 1
            except Exception:
                failed += 1
        await message.answer(f"–†–æ–∑—Å–∏–ª–∫—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ. –£—Å–ø—ñ—à–Ω–æ: {sent}, –ø–æ–º–∏–ª–æ–∫: {failed}.", reply_markup=get_main_menu(is_admin=is_admin(message)))
        await state.clear()

    @dp.message(lambda m: m.text == "üîÅ –¢–∏–∂–Ω–µ–≤–∞ —Ä–æ–∑—Å–∏–ª–∫–∞")
    async def weekly_broadcast(message: Message):
        if not is_admin(message):
            return await message.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
        text = db.get_weekly_broadcast() or "–¢–µ–∫—Å—Ç —Ç–∏–∂–Ω–µ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏ —â–µ –Ω–µ –∑–∞–¥–∞–Ω–æ."
        kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚úÖ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ç–∏–∂–Ω–µ–≤—É —Ä–æ–∑—Å–∏–ª–∫—É")], [KeyboardButton(text="‚Äπ –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –º–µ–Ω—é")]],
            resize_keyboard=True
        )
        await message.answer(f"–ü–æ—Ç–æ—á–Ω–∏–π —Ç–µ–∫—Å—Ç —Ç–∏–∂–Ω–µ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏:\n\n{text}", reply_markup=kb)

    @dp.message(lambda m: m.text == "‚úÖ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ç–∏–∂–Ω–µ–≤—É —Ä–æ–∑—Å–∏–ª–∫—É")
    async def send_weekly_broadcast(message: Message):
        if not is_admin(message):
            return await message.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
        text = db.get_weekly_broadcast()
        if not text:
            return await message.answer("–¢–µ–∫—Å—Ç —Ç–∏–∂–Ω–µ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏ –Ω–µ –∑–∞–¥–∞–Ω–æ.")
        users = db.get_all_users()
        sent = 0
        failed = 0
        for user in users:
            try:
                await bot.send_message(user[0], text)
                sent += 1
            except Exception:
                failed += 1
        await message.answer(f"–¢–∏–∂–Ω–µ–≤–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞. –£—Å–ø—ñ—à–Ω–æ: {sent}, –ø–æ–º–∏–ª–æ–∫: {failed}.", reply_markup=get_main_menu(is_admin=is_admin(message)))

    @dp.message(lambda m: m.text == "‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç —Ç–∏–∂–Ω–µ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏")
    async def edit_weekly_broadcast(message: Message, state: FSMContext):
        if not is_admin(message):
            return await message.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–∏–∂–Ω–µ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏:")
        await state.set_state(AdminStates.waiting_for_weekly_text)

    @dp.message(AdminStates.waiting_for_weekly_text)
    async def save_weekly_broadcast(message: Message, state: FSMContext):
        db.set_weekly_broadcast(message.text)
        await message.answer("–¢–µ–∫—Å—Ç —Ç–∏–∂–Ω–µ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!", reply_markup=get_main_menu(is_admin=is_admin(message)))
        await state.clear()
        
    # --- –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∞–∫—Ü—ñ–π ---
    @dp.message(lambda m: m.text == "üìù –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∞–∫—Ü—ñ—ó")
    async def promo_action_menu(message: Message, state: FSMContext):
        if not is_admin(message):
            return await message.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
        kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –∞–∫—Ü—ñ—é")],
                [KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∞–∫—Ü—ñ—é")],
                [KeyboardButton(text="‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –∞–∫—Ü—ñ—é")],
                [KeyboardButton(text="‚Äπ –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –º–µ–Ω—é")],
            ], resize_keyboard=True
        )
        await message.answer("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –∞–∫—Ü—ñ—è–º–∏:", reply_markup=kb)
        await state.set_state(AdminStates.waiting_for_promo_action)

    @dp.message(AdminStates.waiting_for_promo_action)
    async def handle_promo_action(message: Message, state: FSMContext):
        if message.text == "‚ûï –î–æ–¥–∞—Ç–∏ –∞–∫—Ü—ñ—é":
            await message.answer("–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—ó –∞–∫—Ü—ñ—ó:")
            await state.set_state(AdminStates.waiting_for_new_promo)
        elif message.text == "‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∞–∫—Ü—ñ—é":
            promos = db.get_promos()
            if not promos:
                await message.answer("–ù–µ–º–∞—î –∞–∫—Ü—ñ–π –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.", reply_markup=get_main_menu(is_admin=is_admin(message)))
                await state.clear()
                return
            text = "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∞–∫—Ü—ñ—ó –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:\n"
            for pid, promo in promos:
                text += f"{pid}. {promo}\n"
            await message.answer(text)
            await state.set_state(AdminStates.waiting_for_edit_promo_id)
        elif message.text == "‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –∞–∫—Ü—ñ—é":
            promos = db.get_promos()
            if not promos:
                await message.answer("–ù–µ–º–∞—î –∞–∫—Ü—ñ–π –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.", reply_markup=get_main_menu(is_admin=is_admin(message)))
                await state.clear()
                return
            text = "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∞–∫—Ü—ñ—ó –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:\n"
            for pid, promo in promos:
                text += f"{pid}. {promo}\n"
            await message.answer(text)
            await state.set_state(AdminStates.waiting_for_delete_promo_id)
        elif message.text == "‚Äπ –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –º–µ–Ω—é":
            await message.answer("–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é.", reply_markup=get_main_menu(is_admin=is_admin(message)))
            await state.clear()
        else:
            await message.answer("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é.")

    @dp.message(AdminStates.waiting_for_new_promo)
    async def add_new_promo(message: Message, state: FSMContext):
        db.add_promo(message.text)
        await message.answer("–ê–∫—Ü—ñ—é –¥–æ–¥–∞–Ω–æ!", reply_markup=get_main_menu(is_admin=is_admin(message)))
        await state.clear()

    @dp.message(AdminStates.waiting_for_edit_promo_id)
    async def ask_edit_promo_text(message: Message, state: FSMContext):
        try:
            promo_id = int(message.text.strip())
        except Exception:
            await message.answer("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä –∞–∫—Ü—ñ—ó!")
            return
        promos = db.get_promos()
        if not any(pid == promo_id for pid, _ in promos):
            await message.answer("–ê–∫—Ü—ñ—ó –∑ —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —ñ—Å–Ω—É—î!")
            return
        await state.update_data(edit_promo_id=promo_id)
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –∞–∫—Ü—ñ—ó:")
        await state.set_state(AdminStates.waiting_for_edit_promo_text)

    @dp.message(AdminStates.waiting_for_edit_promo_text)
    async def save_edited_promo(message: Message, state: FSMContext):
        data = await state.get_data()
        promo_id = data.get("edit_promo_id")
        db.update_promo(promo_id, message.text)
        await message.answer("–ê–∫—Ü—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=get_main_menu(is_admin=is_admin(message)))
        await state.clear()

    @dp.message(AdminStates.waiting_for_delete_promo_id)
    async def delete_promo_handler(message: Message, state: FSMContext):
        try:
            promo_id = int(message.text.strip())
        except Exception:
            await message.answer("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä –∞–∫—Ü—ñ—ó!")
            return
        promos = db.get_promos()
        if not any(pid == promo_id for pid, _ in promos):
            await message.answer("–ê–∫—Ü—ñ—ó –∑ —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —ñ—Å–Ω—É—î!")
            return
        db.delete_promo(promo_id)
        await message.answer("–ê–∫—Ü—ñ—é –≤–∏–¥–∞–ª–µ–Ω–æ!", reply_markup=get_main_menu(is_admin=is_admin(message)))
        await state.clear()

# --- –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —Ç–∏–∂–Ω–µ–≤–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ ---
async def scheduled_weekly_broadcast(bot):
    text = db.get_weekly_broadcast()
    if not text:
        return
    users = db.get_all_users()
    for user in users:
        try:
            await bot.send_message(user[0], text)
        except Exception:
            pass

def start_scheduler(bot):
    scheduler = AsyncIOScheduler()
    def job_wrapper():
        asyncio.create_task(scheduled_weekly_broadcast(bot))
    day, hour, minute = db.get_weekly_time()
    scheduler.add_job(job_wrapper, "cron", day_of_week=day, hour=hour, minute=minute)
    scheduler.start()
