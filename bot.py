from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import CommandStart
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton, Contact, CallbackQuery
from aiogram.client.default import DefaultBotProperties
from config import TELEGRAM_TOKEN
from broadcast import register_broadcast_handlers, start_scheduler, is_admin

import db
import asyncio
import logging
import sys
import os

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

bot = Bot(
    token=TELEGRAM_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())

db.init_db()
db.init_promos_table()

# --- –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é ---
def get_main_menu(is_admin=False):
    buttons = [
        [KeyboardButton(text="üì± –ú—ñ–π QR-–∫–æ–¥")],
        [KeyboardButton(text="üí∞ –ù–∞–∫–æ–ø–∏—á–µ–Ω–Ω—è")],
        [KeyboardButton(text="üçΩ –ú–µ–Ω—é –∑–∞–∫–ª–∞–¥—É")],
        [KeyboardButton(text="üõµ –î–æ—Å—Ç–∞–≤–∫–∞")],
        [KeyboardButton(text="üìÖ –ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Å—Ç–æ–ª–∏–∫")],
        [KeyboardButton(text="üè∑ –ê–∫—Ü—ñ—ó")],
    ]
    if is_admin:
        buttons.insert(0, [KeyboardButton(text="‚öôÔ∏è –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å")])
    kb = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
    return kb

# --- /start ---
@dp.message(CommandStart())
async def cmd_start(message: Message):
    isadm = is_admin(message)
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True)]],
        resize_keyboard=True
    )
    await message.answer(f"–ü—Ä–∏—î–º–Ω–æ –ø–æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å, <b>{message.from_user.first_name}</b>!\n\n–¢–∞–∫–æ–∂ –¥–æ–¥–∞–π—Ç–µ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ üëá", reply_markup=kb)

# --- –û–±—Ä–æ–±–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç—É ---
@dp.message(lambda m: m.contact is not None)
async def handle_contact(message: Message):
    phone = message.contact.phone_number
    db.add_user(message.from_user.id, phone, 0)
    isadm = is_admin(message)
    await message.answer("–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ\n\n–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ!", reply_markup=get_main_menu(is_admin=isadm))


# --- –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é ---
@dp.message(lambda m: m.text == "‚Äπ –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –º–µ–Ω—é")
async def back_to_menu(message: Message):
    isadm = is_admin(message)
    await message.answer("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=get_main_menu(is_admin=isadm))


# --- –ö–Ω–æ–ø–∫–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é ---
def get_back_menu():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚Äπ –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –º–µ–Ω—é")]],
        resize_keyboard=True
    )

# --- –ü–æ–∫–∞–∑–∞—Ç–∏ QR-–∫–æ–¥ ---
@dp.message(lambda m: m.text == "üì± –ú—ñ–π QR-–∫–æ–¥")
async def show_qr(message: Message):
    user = db.get_user(message.from_user.id)
    if not user or not user[0]:
        await message.answer("‚ùå –í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –∞–±–æ –Ω–µ –≤–∫–∞–∑–∞–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start", reply_markup=get_back_menu())
        return
    phone = user[0]
    qr_url = f"https://api.qrserver.com/v1/create-qr-code/?size=300x300&data={phone}"
    await message.answer_photo(photo=qr_url, caption=f"üì∑ –í–∞—à QR-–∫–æ–¥ –¥–ª—è –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–æ–Ω—É—Å—ñ–≤\n\n–ù–æ–º–µ—Ä: <b>{phone}</b>", reply_markup=get_back_menu())

# --- –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å ---
@dp.message(lambda m: m.text == "üí∞ –ù–∞–∫–æ–ø–∏—á–µ–Ω–Ω—è")
async def profile(message: Message):
    user = db.get_user(message.from_user.id)
    if not user:
        return await message.answer("‚ùå –í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start", reply_markup=get_back_menu())
    # –¢–∏–º—á–∞—Å–æ–≤–æ –ø–æ–∫–∞–∑—É—î–º–æ —Ñ—ñ–∫—Ç–∏–≤–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å
    text = f"<b>üë§ –ü—Ä–æ—Ñ—ñ–ª—å: {message.from_user.first_name}</b>\n\n"
    text += f"<b>üí≥ –í–∞—à–∞ –∑–Ω–∏–∂–∫–∞:</b> 1%\n"
    text += f"‚¨ÜÔ∏è –ü—Ä–æ–≥—Ä–µ—Å –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è –∑–Ω–∏–∂–∫–∏: 0%\n"
    text += f"‚ú® –ü—Ä–æ–≥—Ä–µ—Å –¥–æ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ–≥–æ –∫–∞–ª—å—è–Ω—É: 0%\n\n"
    text += "üéÅ <b>–ë–æ–Ω—É—Å–∏:</b> –ù–∞–∫–æ–ø–∏—á—É–π—Ç–µ –≤–∏—Ç—Ä–∞—Ç–∏ ‚Äî –æ—Ç—Ä–∏–º—É–π—Ç–µ –∑–Ω–∏–∂–∫–∏ —Ç–∞ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ –∫–∞–ª—å—è–Ω–∏!\n"
    text += "‚≠ê <b>–ü–µ—Ä–µ–≤–∞–≥–∏:</b> –ë—ñ–ª—å—à–∞ –∑–Ω–∏–∂–∫–∞ –Ω–∞ –∫–æ–∂–Ω–æ–º—É —Ä—ñ–≤–Ω—ñ + –ø—Ä–∏—î–º–Ω—ñ —Å—é—Ä–ø—Ä–∏–∑–∏ –¥–ª—è –ø–æ—Å—Ç—ñ–π–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤."
    await message.answer(text, reply_markup=get_back_menu())

# --- –ú–µ–Ω—é –∑–∞–∫–ª–∞–¥—É ---
@dp.message(lambda m: m.text == "üçΩ –ú–µ–Ω—é –∑–∞–∫–ª–∞–¥—É")
async def menu_link(message: Message):
    text = f"–ú–µ–Ω—é –∑–∞–∫–ª–∞–¥—É: "
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ú–µ–Ω—é –∑–∞–∫–ª–∞–¥—É", url="https://lemon.choiceqr.com/")],
            [InlineKeyboardButton(text="‚Äπ –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
    )
    await message.answer(text, reply_markup=kb, disable_web_page_preview=True)

# --- –î–æ—Å—Ç–∞–≤–∫–∞ ---
@dp.message(lambda m: m.text == "üõµ –î–æ—Å—Ç–∞–≤–∫–∞")
async def delivery(message: Message):
    text = "–î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ Bolt Food!"
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="Bolt Food", url="https://food.bolt.eu/en-US/990/p/134325-lemon?utm_source=share_provider&utm_medium=product&utm_content=menu_header")],
            [InlineKeyboardButton(text="‚Äπ –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
    )
    await message.answer(text, reply_markup=kb, disable_web_page_preview=True)

# --- –ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Å—Ç–æ–ª–∏–∫ ---
@dp.message(lambda m: m.text == "üìÖ –ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Å—Ç–æ–ª–∏–∫")
async def book_table(message: Message):
    text = (
        "–ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Å—Ç–æ–ª–∏–∫ –º–æ–∂–Ω–∞ –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É: <b>+380 68 123 43 45</b>\n"
        "–∞–±–æ –Ω–∞–ø–∏—Å–∞—Ç–∏ –≤ –¥—ñ—Ä–µ–∫—Ç Instagram."
    )
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–°–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –Ω–æ–º–µ—Ä", callback_data="copy_phone")],
            [InlineKeyboardButton(text="Instagram", url="https://www.instagram.com/lemon.gastrobar.if?igsh=emxlN3dnZW11dWJ4")],
            [InlineKeyboardButton(text="‚Äπ –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
    )
    await message.answer(text, reply_markup=kb, disable_web_page_preview=True)

# --- –ê–∫—Ü—ñ—ó ---
@dp.message(lambda m: m.text == "üè∑ –ê–∫—Ü—ñ—ó")
async def show_promos(message: Message):
    promos = db.get_promos()
    if promos:
        text = "<b>–ê–∫—Ç—É–∞–ª—å–Ω—ñ –∞–∫—Ü—ñ—ó:</b>\n"
        for pid, promo in promos:
            text += f"\n{pid}. {promo}"
        await message.answer(text, reply_markup=get_back_menu())
    else:
        await message.answer("–ó–∞—Ä–∞–∑ –Ω–µ–º–∞—î –∞–∫—Ç—É–∞–ª—å–Ω–∏—Ö –∞–∫—Ü—ñ–π.", reply_markup=get_back_menu())

# --–û–±—Ä–æ–±–Ω–∏–∫ inline-–∫–Ω–æ–ø–æ–∫
# --- –û–±—Ä–æ–±–∫–∞ callback –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é –∑ inline-–∫–Ω–æ–ø–∫–∏ ---
@dp.callback_query(lambda c: c.data == "back_to_menu")
async def inline_back_to_menu(callback: CallbackQuery):
    isadm = is_admin(callback.message)
    await callback.message.edit_text("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=None)
    await callback.message.answer("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=get_main_menu(is_admin=isadm))

# --- –û–±—Ä–æ–±–∫–∞ callback –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É ---
@dp.callback_query(lambda c: c.data == "copy_phone")
async def copy_phone_callback(callback: CallbackQuery):
    await callback.answer("–ù–æ–º–µ—Ä —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ!", show_alert=True)
    await callback.message.answer("+380681234345")

async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
    try:
        register_broadcast_handlers(dp, bot, get_main_menu)
        start_scheduler(bot)
        logger.info("–ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∏–π —Ç–∞ –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}")
        raise

if __name__ == "__main__":
    port = int(os.getenv("PORT", 8000))
    logger.info(f"–ó–∞–ø—É—Å–∫ –Ω–∞ –ø–æ—Ä—Ç—É: {port}")
    asyncio.run(main())